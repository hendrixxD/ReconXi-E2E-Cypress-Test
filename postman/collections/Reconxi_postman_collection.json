{
	"info": {
		"_postman_id": "d25658a9-1390-4301-abe0-2a4cb40213e5",
		"name": "Reconxi",
		"description": "ReconXi simplifies financial reconciliation for accountants, auditors, financial analysts, small businesses, and schools. Whether youâ€™re managing transactions, handling business accounts, or reconciling school fees and payroll, experience a faster, more accurate way to reconcile your finances.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14435945",
		"_collection_link": "https://red-escape-620236.postman.co/workspace/ReconXi.com~c9efbec4-1e1f-4796-9344-75ca11a55be4/collection/14435945-d25658a9-1390-4301-abe0-2a4cb40213e5?action=share&source=collection_link&creator=14435945"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "User login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code, message, data\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('code');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('data');",
											"});",
											"",
											"",
											"pm.test(\"Validate the user object\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data.user).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"// pm.test(\"Email is in a valid format\", function () {",
											"//     const responseData = pm.response.json();",
											"    ",
											"//     pm.expect(responseData.data.user.email).to.be.a('string').and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"// });",
											"",
											"",
											"pm.test(\"Token is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
											"});",
											"",
											"// Parse the response body as JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the response contains a token",
											"pm.test(\"Response contains a token\", function () {",
											"    pm.expect(response.data).to.have.property(\"token\");",
											"});",
											"",
											"// Save the token in a collection variable",
											"if (response.data && response.data.token) {",
											"    pm.collectionVariables.set(\"bearerToken\", response.data.token);",
											"    console.log(\"Token saved successfully:\", response.data.token);",
											"} else {",
											"    console.log(\"Token not found in response\");",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 20:21:28 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Login Success\",\n    \"data\": {\n        \"user\": {\n            \"id\": 160,\n            \"name\": \"Vickie Greenholt\",\n            \"email\": \"Daphne.Kunze@gmail.com\",\n            \"email_verified_at\": null,\n            \"created_at\": \"2025-03-29T20:13:28.000000Z\",\n            \"updated_at\": \"2025-03-29T20:13:28.000000Z\"\n        },\n        \"plan\": {\n            \"id\": 134,\n            \"user_id\": 160,\n            \"created_at\": \"2025-03-29T20:13:28.000000Z\",\n            \"updated_at\": \"2025-03-29T20:13:28.000000Z\",\n            \"plan_id\": \"8abfb0e1-cf2c-486a-8ee8-2fbd132bea32\",\n            \"stripe_reference\": null,\n            \"start_date\": \"2025-03-29T20:13:28.000000Z\",\n            \"expire_date\": \"2025-04-28T20:13:28.000000Z\",\n            \"is_active\": true,\n            \"reconciliations_used\": 0\n        },\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS1kZXYucmVjb254aS5jb20vYXBpL3YxL2F1dGgvbG9naW4iLCJpYXQiOjE3NDMyNzk2ODgsImV4cCI6MTc0Mzg4NDQ4OCwibmJmIjoxNzQzMjc5Njg4LCJqdGkiOiJzRXg1QlJrMUFFbGhkZngxIiwic3ViIjoiMTYwIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.9KUuXTF3deDasF1h6DENROziyTU0Mj8jeZM0xH0FuEw\"\n    }\n}"
								}
							]
						},
						{
							"name": "Login with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response includes a 'message' field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Errors object contains the email field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"    pm.expect(responseData.errors.email).to.exist;",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"!@#$%^&*()\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "Login with special characters",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"!@#$%^&*()\",\n  \"password\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Thu, 27 Mar 2025 22:58:03 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The email field must be a valid email address.\",\n    \"errors\": {\n        \"email\": [\n            \"The email field must be a valid email address.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "User login with invalid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('code');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Code and message properties exist in the response\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"maureenutem@gmail.com\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login with invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"maureenutem@gmail.com\",\n  \"password\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Thu, 27 Mar 2025 23:35:41 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "User login blank password field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Password error is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors.password).to.be.an('array').that.is.not.empty;",
											"    responseData.errors.password.forEach(function(error) {",
											"        pm.expect(error).to.be.a('string').that.is.not.empty;",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"mau0@yopmail.com\",\n  \"password\": \"\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login blank password field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"mau0@yopmail.com\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Thu, 27 Mar 2025 23:33:59 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The password field is required.\",\n    \"errors\": {\n        \"password\": [\n            \"The password field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "User login with wrong username and valid password.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Code field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('code');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Ensure that the message field provides a meaningful error message\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response includes a valid error code\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"mau0@yopmail.com\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login blank password field Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"mau0@yopmail.com\",\n  \"password\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 07:11:04 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "An error message should be displayed when login details are blank.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Email error is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors.email).to.be.an('array').that.is.not.empty;",
											"    pm.expect(responseData.errors.email[0]).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Password error is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.errors.password).to.be.an('array');",
											"  responseData.errors.password.forEach(function(error) {",
											"    pm.expect(error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password error should not be empty\");",
											"  });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login blank fields",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Thu, 27 Mar 2025 23:04:16 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The email field is required. (and 1 more error)\",\n    \"errors\": {\n        \"email\": [\n            \"The email field is required.\"\n        ],\n        \"password\": [\n            \"The password field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Login without an access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Data object has the expected structure\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data.user).to.be.an('object');",
											"    pm.expect(responseData.data.plan).to.be.an('object');",
											"    pm.expect(responseData.data.token).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"User object format and presence within data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data.user).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Ensure the 'plan' object contains all the expected fields and data types\", function () {",
											"    const responseData = pm.response.json().data.plan;",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.be.a('number');",
											"    pm.expect(responseData.user_id).to.be.a('number');",
											"    pm.expect(responseData.created_at).to.be.a('string');",
											"    pm.expect(responseData.updated_at).to.be.a('string');",
											"    pm.expect(responseData.plan_id).to.be.null;",
											"    pm.expect(responseData.stripe_reference).to.be.null;",
											"    pm.expect(responseData.start_date).to.be.null;",
											"    pm.expect(responseData.expire_date).to.be.null;",
											"    pm.expect(responseData.is_active).to.be.a('boolean');",
											"    pm.expect(responseData.reconciliations_used).to.be.a('number');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"perez3@yopmail.com\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "An error message should be displayed when login details are blank. Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"perez3@yopmail.com\",\n  \"password\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 07:23:54 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Login Success\",\n    \"data\": {\n        \"user\": {\n            \"id\": 123,\n            \"name\": \"Mali Lawrence\",\n            \"email\": \"perez3@yopmail.com\",\n            \"email_verified_at\": null,\n            \"created_at\": \"2025-03-27T23:12:48.000000Z\",\n            \"updated_at\": \"2025-03-27T23:12:48.000000Z\"\n        },\n        \"plan\": {\n            \"id\": 98,\n            \"user_id\": 123,\n            \"created_at\": \"2025-03-27T23:12:48.000000Z\",\n            \"updated_at\": \"2025-03-27T23:12:48.000000Z\",\n            \"plan_id\": null,\n            \"stripe_reference\": null,\n            \"start_date\": null,\n            \"expire_date\": null,\n            \"is_active\": true,\n            \"reconciliations_used\": 0\n        },\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS1kZXYucmVjb254aS5jb20vYXBpL3YxL2F1dGgvbG9naW4iLCJpYXQiOjE3NDMxNDY2MzQsImV4cCI6MTc0Mzc1MTQzNCwibmJmIjoxNzQzMTQ2NjM0LCJqdGkiOiJxS0g1eVhuY1lDWFA4bzJIIiwic3ViIjoiMTIzIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.fiVOGrBIgkMUUT4YibjwgdkPYFmuz0hX0M_DTHfQF3c\"\n    }\n}"
								}
							]
						},
						{
							"name": "User login minimum email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"mau4\",\n  \"password\": \"Welcome@22\"\n}\n4",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login minimum password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"mau4@yopmail.com\",\n  \"password\": \"Wel\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 07:53:43 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "User login maximum email length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"Wel spass hshjsj jjjsjs jakaka kkkakk aooooo oqooqo qoqoq oqo oqoq ooqoq oqoqo qoqoq oqoqo oqall allll llllq ooqo qoqo qoq opo qpq pq ppp qpq pqp qp qpq pqppq pqqpq pjg hhh bli hio b;j odjf ijfh vkl jndj kljhkjd mhhjfdjf hjfhj fdhjf kjfhj fjvjg fgvjf yughk ghxgh hgg hfd ghc vvg sdv cvf dsg hfc udv dkf gcs hgj dfh sgd fgh dfg hjd fgh jdg dfg hhd fgg dfs ghf ghd fgdh kgfu iyeb cgyv ebvv  buyg fgyu esbg uyfg sufy ibsw uyib ufyi uwyf biug uebt yure teby uiig etue uyge ruyi teru yeWels passhs hjsjjj jsjsja kakakk kakkao oo ooo qoo qoq oqoq oqooq oqo oqoq oqoqo qoqo qoq oqooq all alll lllll qooq oqoqo qoqo poqp qpq pppq pqpq pqpq pqpqp pqp qqpq pjgh hh bl ihi ob ; jo d jf ijf hvk ljnd jklj hkjd mhhj fdjf hjfh jfdh jfkj fhjf jvjg fgvj fyug hkgh xghh gghf dghc vvgs dvcv fdsg hfc u dvdk fgcs hgjd fhsg dfgh dfgh jdfg hjdg dfgh hdfgg dfsg hfgh dfgd hkgf uiye bcgy vebv vbuy gfgy uesb guyf gsuf yibs wuyi bufy iuwy fbi ugu ebt yur ete byu iige tue uy geru yi ter uyeW elsp assh shjs jjjj sjsj akak akkk akka oooo ooqo oqoq oqoq oqoo qoqo oqoq oqoq oqoq oqoq oqoo qal la lll lll llq ooqo qoqo qoq opoq pqp qpp pq pqpq pqp qpqp qp pqp qqpqp jghhhb li hi ob; Wel spass hshjsj jjjsjs jakaka kkkakk aooooo oqooqo qoqoq oqo oqoq ooqoq oqoqo Wel spass hshjsj jjjsjs jakaka kkkakk aooooo oqooqo qoqoq oqo oqoq ooqoq oqoqo qoqoq oqoqo oqall allll llllq ooqo qoqo qoq opo qpq pq ppp qpq pqp qp qpq pqppq pqqpq pjg hhh bli hio b;j odjf ijfh vkl jndj kljhkjd mhhjfdjf hjfhj fdhjf kjfhj fjvjg fgvjf yughk ghxgh hgg hfd ghc vvg sdv cvf dsg hfc udv dkf gcs hgj dfh sgd fgh dfg hjd fgh jdg dfg hhd fgg dfs ghf ghd fgdh kgfu iyeb cgyv ebvv  buyg fgyu esbg uyfg sufy ibsw uyib ufyi uwyf biug uebt yure teby uiig etue uyge ruyi teru yeWels passhs hjsjjj jsjsja kakakk kakkao oo ooo qoo qoq oqoq oqooq oqo oqoq oqoqo qoqo qoq oqooq all alll lllll qooq oqoqo qoqo poqp qpq pppq pqpq pqpq pqpqp pqp qqpq pjgh hh bl ihi ob ; jo d jf ijf hvk ljnd jklj hkjd mhhj fdjf hjfh jfdh jfkj fhjf jvjg fgvj fyug hkgh xghh gghf dghc vvgs dvcv fdsg hfc u dvdk fgcs hgjd fhsg dfgh dfgh jdfg hjdg dfgh hdfgg dfsg hfgh dfgd hkgf uiye bcgy vebv vbuy gfgy uesb guyf gsuf yibs wuyi bufy iuwy fbi ugu ebt yur ete byu iige tue uy geru yi ter uyeW elsp assh shjs jjjj sjsj akak akkk akka oooo ooqo oqoq oqoq oqoo qoqo oqoq oqoq oqoq oqoq oqoo qal la lll lll llq ooqo qoqo qoq opoq pqp qpp pq pqpq pqp qpqp qp pqp qqpqp jghhhb li hi ob; Wel spass hshjsj jjjsjs jakaka kkkakk aooooo oqooqo qoqoq oqo oqoq ooqoq oqoqo @qoqoq\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login minimum password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"mau4@yopmail.com\",\n  \"password\": \"Wel\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 07:53:43 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "User login minimum password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"maureenutem@mail.com\",\n  \"password\": \"Wel\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login minimum password Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"maureenutem@mail.com\",\n  \"password\": \"Wel\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 11:08:51 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "User login maximum password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"maureenutem@mail.com\",\n  \"password\": \"Wel spass hshjsj jjjsjs jakaka kkkakk aooooo oqooqo qoqoq oqo oqoq ooqoq oqoqo qoqoq oqoqo oqall allll llllq ooqo qoqo qoq opo qpq pq ppp qpq pqp qp qpq pqppq pqqpq pjg hhh bli hio b;j odjf ijfh vkl jndj kljhkjd mhhjfdjf hjfhj fdhjf kjfhj fjvjg fgvjf yughk ghxgh hgg hfd ghc vvg sdv cvf dsg hfc udv dkf gcs hgj dfh sgd fgh dfg hjd fgh jdg dfg hhd fgg dfs ghf ghd fgdh kgfu iyeb cgyv ebvv  buyg fgyu esbg uyfg sufy ibsw uyib ufyi uwyf biug uebt yure teby uiig etue uyge ruyi teru yeWels passhs hjsjjj jsjsja kakakk kakkao oo ooo qoo qoq oqoq oqooq oqo oqoq oqoqo qoqo qoq oqooq all alll lllll qooq oqoqo qoqo poqp qpq pppq pqpq pqpq pqpqp pqp qqpq pjgh hh bl ihi ob ; jo d jf ijf hvk ljnd jklj hkjd mhhj fdjf hjfh jfdh jfkj fhjf jvjg fgvj fyug hkgh xghh gghf dghc vvgs dvcv fdsg hfc u dvdk fgcs hgjd fhsg dfgh dfgh jdfg hjdg dfgh hdfgg dfsg hfgh dfgd hkgf uiye bcgy vebv vbuy gfgy uesb guyf gsuf yibs wuyi bufy iuwy fbi ugu ebt yur ete byu iige tue uy geru yi ter uyeW elsp assh shjs jjjj sjsj akak akkk akka oooo ooqo oqoq oqoq oqoo qoqo oqoq oqoq oqoq oqoq oqoo qal la lll lll llq ooqo qoqo qoq opoq pqp qpp pq pqpq pqp qpqp qp pqp qqpqp jghhhb li hi ob; Wel spass hshjsj jjjsjs jakaka kkkakk aooooo oqooqo qoqoq oqo oqoq ooqoq oqoqo qoqoq\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login minimum password Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"maureenutem@mail.com\",\n  \"password\": \"Wel\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 11:08:51 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 401,\n    \"message\": \"Invalid credentials\"\n}"
								}
							]
						},
						{
							"name": "Retrieve authenticated user details Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Check if access token exists",
											"const accessToken = pm.collectionVariables.get('access_token');",
											"",
											"",
											"// Add Authorization header",
											"pm.request.headers.add({",
											"    key: 'Authorization',",
											"    value: `Bearer ${accessToken}`",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								},
								"description": "Fetches the details of the authenticated user using a valid JWT token."
							},
							"response": [
								{
									"name": "Retrieve authenticated user details Copy",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 06:04:15 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"status_code\": 200,\n    \"status\": \"success\",\n    \"message\": \"User successfully fetched\",\n    \"data\": {\n        \"user\": {\n            \"id\": 136,\n            \"name\": \"Roderick Morissette\",\n            \"email\": \"Regan_Weimann@gmail.com\",\n            \"email_verified_at\": null,\n            \"created_at\": \"2025-03-28T23:40:15.000000Z\",\n            \"updated_at\": \"2025-03-28T23:40:15.000000Z\",\n            \"avatar\": null,\n            \"country\": null,\n            \"city\": null,\n            \"payment_plan\": {\n                \"id\": 111,\n                \"user_id\": 136,\n                \"created_at\": \"2025-03-28T23:40:15.000000Z\",\n                \"updated_at\": \"2025-03-28T23:40:15.000000Z\",\n                \"plan_id\": null,\n                \"stripe_reference\": null,\n                \"start_date\": null,\n                \"expire_date\": null,\n                \"is_active\": true,\n                \"reconciliations_used\": 0,\n                \"plan\": null\n            }\n        },\n        \"plan\": {\n            \"id\": 111,\n            \"user_id\": 136,\n            \"created_at\": \"2025-03-28T23:40:15.000000Z\",\n            \"updated_at\": \"2025-03-28T23:40:15.000000Z\",\n            \"plan_id\": null,\n            \"stripe_reference\": null,\n            \"start_date\": null,\n            \"expire_date\": null,\n            \"is_active\": true,\n            \"reconciliations_used\": 0,\n            \"plan\": null\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Retrieve authenticated user details with POST method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 405\", function () {",
											"    pm.expect(pm.response.code).to.equal(405);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Check if access token exists",
											"const accessToken = pm.collectionVariables.get('access_token');",
											"",
											"",
											"// Add Authorization header",
											"pm.request.headers.add({",
											"    key: 'Authorization',",
											"    value: `Bearer ${accessToken}`",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								},
								"description": "Fetches the details of the authenticated user using a valid JWT token."
							},
							"response": [
								{
									"name": "Retrieve authenticated user details with Post method",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "GET, HEAD, DELETE"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 12:09:23 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The POST method is not supported for route api/v1/user. Supported methods: GET, HEAD, DELETE.\",\n    \"exception\": \"Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\MethodNotAllowedHttpException\",\n    \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n    \"line\": 123,\n    \"trace\": [\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n            \"line\": 108,\n            \"function\": \"requestMethodNotAllowed\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n            \"line\": 42,\n            \"function\": \"getRouteForMethods\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php\",\n            \"line\": 162,\n            \"function\": \"handleMatchedRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 763,\n            \"function\": \"match\",\n            \"class\": \"Illuminate\\\\Routing\\\\RouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 750,\n            \"function\": \"findRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 739,\n            \"function\": \"dispatchToRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 201,\n            \"function\": \"dispatch\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 170,\n            \"function\": \"Illuminate\\\\Foundation\\\\Http\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php\",\n            \"line\": 21,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php\",\n            \"line\": 31,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\ConvertEmptyStringsToNull\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php\",\n            \"line\": 21,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php\",\n            \"line\": 51,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TrimStrings\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Http/Middleware/ValidatePostSize.php\",\n            \"line\": 27,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\ValidatePostSize\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php\",\n            \"line\": 110,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\PreventRequestsDuringMaintenance\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php\",\n            \"line\": 62,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\HandleCors\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php\",\n            \"line\": 58,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\TrustProxies\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/InvokeDeferredCallbacks.php\",\n            \"line\": 22,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\InvokeDeferredCallbacks\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 127,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 176,\n            \"function\": \"then\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 145,\n            \"function\": \"sendRequestThroughRouter\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Application.php\",\n            \"line\": 1220,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/public/index.php\",\n            \"line\": 17,\n            \"function\": \"handleRequest\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Application\",\n            \"type\": \"->\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Login with a expired refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Check if access token exists",
											"const accessToken = pm.collectionVariables.get('access_token');",
											"",
											"",
											"// Add Authorization header",
											"pm.request.headers.add({",
											"    key: 'Authorization',",
											"    value: `Bearer ${accessToken}`",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "THGFGXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS1kZXYucmVjb254aS5jb20vYXBpL3YxL2F1dGgvbG9naW4iLCJpYXQiOjE3NDM1NzcyOTMsImV4cCI6MTc0NDE4MjA5MywibmJmIjoxNzQzNTc3MjkzLCJqdGkiOiIwZW1EUnlIb05hRXdxaUtwIiwic3ViIjoiMjQyIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.46XtsLYs1yRnvVv7UkzjlfVXyJud0dkUmWDvAnze5Hg",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"maureenutem@mail.com\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Fetches the details of the authenticated user using a valid JWT token."
							},
							"response": [
								{
									"name": "Retrieve authenticated user details Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "GET, HEAD, DELETE"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Fri, 28 Mar 2025 12:09:23 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The POST method is not supported for route api/v1/user. Supported methods: GET, HEAD, DELETE.\",\n    \"exception\": \"Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\MethodNotAllowedHttpException\",\n    \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n    \"line\": 123,\n    \"trace\": [\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n            \"line\": 108,\n            \"function\": \"requestMethodNotAllowed\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n            \"line\": 42,\n            \"function\": \"getRouteForMethods\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php\",\n            \"line\": 162,\n            \"function\": \"handleMatchedRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 763,\n            \"function\": \"match\",\n            \"class\": \"Illuminate\\\\Routing\\\\RouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 750,\n            \"function\": \"findRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 739,\n            \"function\": \"dispatchToRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 201,\n            \"function\": \"dispatch\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 170,\n            \"function\": \"Illuminate\\\\Foundation\\\\Http\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php\",\n            \"line\": 21,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php\",\n            \"line\": 31,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\ConvertEmptyStringsToNull\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php\",\n            \"line\": 21,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php\",\n            \"line\": 51,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TrimStrings\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Http/Middleware/ValidatePostSize.php\",\n            \"line\": 27,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\ValidatePostSize\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php\",\n            \"line\": 110,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\PreventRequestsDuringMaintenance\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php\",\n            \"line\": 62,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\HandleCors\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php\",\n            \"line\": 58,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\TrustProxies\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/InvokeDeferredCallbacks.php\",\n            \"line\": 22,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\InvokeDeferredCallbacks\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 127,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 176,\n            \"function\": \"then\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 145,\n            \"function\": \"sendRequestThroughRouter\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/vendor/laravel/framework/src/Illuminate/Foundation/Application.php\",\n            \"line\": 1220,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/staging/public/index.php\",\n            \"line\": 17,\n            \"function\": \"handleRequest\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Application\",\n            \"type\": \"->\"\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "Users can log in, and authenticate securely using email and password. Ensure email verification is enforced, and sessions are managed correctly."
				},
				{
					"name": "register",
					"item": [
						{
							"name": "User registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Code field in the response should exist and be a number\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.have.property('code').that.is.a('number');",
											"});",
											"",
											"",
											"pm.test(\"Message field in the response should exist and not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'data' object and its nested fields (user, token) in the response\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.have.property('data').that.is.an('object').and.not.empty;",
											"    pm.expect(responseData.data).to.have.property('user').that.is.an('object').and.not.empty;",
											"    pm.expect(responseData.data.user).to.have.property('id').that.is.a('number');",
											"    pm.expect(responseData.data.user).to.have.property('name').that.is.a('string');",
											"    pm.expect(responseData.data.user).to.have.property('email').that.is.a('string');",
											"    pm.expect(responseData.data.user).to.have.property('email_verified_at').that.is.null;",
											"    pm.expect(responseData.data.user).to.have.property('created_at').that.is.a('string');",
											"    pm.expect(responseData.data.user).to.have.property('updated_at').that.is.a('string');",
											"    pm.expect(responseData.data).to.have.property('token').that.is.a('string');",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"email\", responseJson.data.user.email);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomFullName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "User registration",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Baby Lawrence\",\n  \"email\": \"mau1@yopmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:27:36 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"User account registration successful\",\n    \"data\": {\n        \"user\": {\n            \"id\": 148,\n            \"name\": \"Baby Lawrence\",\n            \"email\": \"mau1@yopmail.com\",\n            \"email_verified_at\": null,\n            \"created_at\": \"2025-03-15T22:27:36.000000Z\",\n            \"updated_at\": \"2025-03-15T22:27:36.000000Z\"\n        },\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS1kZXYucmVjb254aS5jb20vYXBpL3YxL2F1dGgvcmVnaXN0ZXIiLCJpYXQiOjE3NDIwNzc2NTYsImV4cCI6MTc0MjA4ODQ1NiwibmJmIjoxNzQyMDc3NjU2LCJqdGkiOiJOdndiS2NpS0JSQTIyaGJFIiwic3ViIjoiMTQ4IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.04LUqkaCtVbwIM1iEgcVY0JdNiesLjGZk2p5VlyF8CM\"\n    }\n}"
								}
							]
						},
						{
							"name": "User registration with blank name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Name in errors is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors.name).to.be.an('array');",
											"    responseData.errors.name.forEach(function (name) {",
											"        pm.expect(name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"email\": \"mau5@y.c\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "User registration with wrong email format",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"\",\n  \"email\": \"mau5@y.c\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 20:30:04 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The name field is required. (and 1 more error)\",\n    \"errors\": {\n        \"name\": [\n            \"The name field is required.\"\n        ],\n        \"email\": [\n            \"The email has already been taken.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Blank email field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Email error message is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errors.email[0]).to.not.be.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Blank email field",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:09:53 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The email field is required.\",\n    \"errors\": {\n        \"email\": [\n            \"The email field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Blank Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Password field in errors is a non-empty array\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errors.password).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Password field should be a non-empty array\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau31@yopmail.com\",\n  \"password\": \"\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Blank Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau1@yopmail.com\",\n  \"password\": \"\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:25:01 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The email has already been taken. (and 1 more error)\",\n    \"errors\": {\n        \"email\": [\n            \"The email has already been taken.\"\n        ],\n        \"password\": [\n            \"The password field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "User registration with wrong method type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 405\", function () {",
											"  pm.expect(pm.response.code).to.equal(405);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.exception).to.exist;",
											"    pm.expect(responseData.file).to.exist;",
											"    pm.expect(responseData.line).to.exist;",
											"    pm.expect(responseData.trace).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Trace array is present and contains the expected number of elements\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.trace).to.be.an('array');",
											"  pm.expect(responseData.trace).to.have.lengthOf.at.least(1, \"Trace array should contain at least one element\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau1@yopmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "User registration with wrong method type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau1@yopmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Allow",
											"value": "POST"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:09:22 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The GET method is not supported for route api/v1/auth/register. Supported methods: POST.\",\n    \"exception\": \"Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\MethodNotAllowedHttpException\",\n    \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n    \"line\": 123,\n    \"trace\": [\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n            \"line\": 108,\n            \"function\": \"requestMethodNotAllowed\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/AbstractRouteCollection.php\",\n            \"line\": 42,\n            \"function\": \"getRouteForMethods\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php\",\n            \"line\": 162,\n            \"function\": \"handleMatchedRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\AbstractRouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 763,\n            \"function\": \"match\",\n            \"class\": \"Illuminate\\\\Routing\\\\RouteCollection\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 750,\n            \"function\": \"findRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Routing/Router.php\",\n            \"line\": 739,\n            \"function\": \"dispatchToRoute\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 201,\n            \"function\": \"dispatch\",\n            \"class\": \"Illuminate\\\\Routing\\\\Router\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 170,\n            \"function\": \"Illuminate\\\\Foundation\\\\Http\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php\",\n            \"line\": 21,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php\",\n            \"line\": 31,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\ConvertEmptyStringsToNull\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php\",\n            \"line\": 21,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php\",\n            \"line\": 51,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TransformsRequest\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\TrimStrings\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Http/Middleware/ValidatePostSize.php\",\n            \"line\": 27,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\ValidatePostSize\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php\",\n            \"line\": 110,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\PreventRequestsDuringMaintenance\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php\",\n            \"line\": 62,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\HandleCors\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php\",\n            \"line\": 58,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Http\\\\Middleware\\\\TrustProxies\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/InvokeDeferredCallbacks.php\",\n            \"line\": 22,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 209,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Middleware\\\\InvokeDeferredCallbacks\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php\",\n            \"line\": 127,\n            \"function\": \"Illuminate\\\\Pipeline\\\\{closure}\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 176,\n            \"function\": \"then\",\n            \"class\": \"Illuminate\\\\Pipeline\\\\Pipeline\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php\",\n            \"line\": 145,\n            \"function\": \"sendRequestThroughRouter\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/vendor/laravel/framework/src/Illuminate/Foundation/Application.php\",\n            \"line\": 1220,\n            \"function\": \"handle\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Http\\\\Kernel\",\n            \"type\": \"->\"\n        },\n        {\n            \"file\": \"/var/www/html/Reconcile-AI-BE-dev/public/index.php\",\n            \"line\": 17,\n            \"function\": \"handleRequest\",\n            \"class\": \"Illuminate\\\\Foundation\\\\Application\",\n            \"type\": \"->\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Email field must be a valid email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Email error message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors.email).to.be.an('array').that.is.not.empty;",
											"    pm.expect(responseData.errors.email[0]).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email error message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau1\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Email field must be a valid email address",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau1\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:09:41 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The email field must be a valid email address.\",\n    \"errors\": {\n        \"email\": [\n            \"The email field must be a valid email address.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Password field must be at least 8 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.include.all.keys('message', 'errors');",
											"});",
											"",
											"",
											"pm.test(\"Password error message is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errors.password[0]).to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Validate the response content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen\",\n  \"email\": \"mau3@yopmail.com\",\n  \"password\": \"Wel\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Password field must be at least 8 characters",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen\",\n  \"email\": \"mau3@yopmail.com\",\n  \"password\": \"Wel\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:10:19 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The password field must be at least 8 characters. (and 1 more error)\",\n    \"errors\": {\n        \"password\": [\n            \"The password field must be at least 8 characters.\",\n            \"The password field confirmation does not match.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Password field confirmation does not match",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau2@yopmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Password field confirmation does not match",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"mau2@yopmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:10:36 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The password field confirmation does not match.\",\n    \"errors\": {\n        \"password\": [\n            \"The password field confirmation does not match.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Registration with empty fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Name, email, and password fields in errors are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.be.an('object');",
											"    ",
											"    pm.expect(responseData.errors.name).to.be.an('array');",
											"    responseData.errors.name.forEach(function (name) {",
											"        pm.expect(name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"    });",
											"    ",
											"    pm.expect(responseData.errors.email).to.be.an('array');",
											"    responseData.errors.email.forEach(function (email) {",
											"        pm.expect(email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
											"    });",
											"    ",
											"    pm.expect(responseData.errors.password).to.be.an('array');",
											"    responseData.errors.password.forEach(function (password) {",
											"        pm.expect(password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"password_confirmation\": \"\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Registration with empty fields",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"password_confirmation\": \"\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:10:49 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The name field is required. (and 2 more errors)\",\n    \"errors\": {\n        \"name\": [\n            \"The name field is required.\"\n        ],\n        \"email\": [\n            \"The email field is required.\"\n        ],\n        \"password\": [\n            \"The password field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Registration with existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Email validation error message is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.errors.email).to.exist.and.to.be.an('array').that.is.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"maureenutem@gmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								},
								"description": "Registers a new user and returns a JWT token"
							},
							"response": [
								{
									"name": "Registration with existing email",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Maureen Lawrence\",\n  \"email\": \"maureenutem@gmail.com\",\n  \"password\": \"Welcome@22\",\n  \"password_confirmation\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"register"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 15 Mar 2025 22:10:58 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The email has already been taken.\",\n    \"errors\": {\n        \"email\": [\n            \"The email has already been taken.\"\n        ]\n    }\n}"
								}
							]
						}
					],
					"description": "Users can register and authenticate securely using email and password. Ensure email verification is enforced, and sessions are managed correctly."
				}
			],
			"description": "Users can register, log in, and authenticate securely using email and password. Ensure email verification is enforced, and sessions are managed correctly."
		},
		{
			"name": "check-token",
			"item": [
				{
					"name": "Check token validity",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/check-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"check-token"
							]
						}
					},
					"response": [
						{
							"name": "Token is valid",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/check-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"check-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Token is invalid or expired",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/check-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"check-token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "forgot-password",
			"item": [
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<email>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"forgot-password"
							]
						},
						"description": "Sends a password reset link to the user's email"
					},
					"response": [
						{
							"name": "Password reset link sent",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Invalid email or request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Validation error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"forgot-password"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"errors\": {\n    \"email\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "reset-password",
			"item": [
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"<string>\",\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"password_confirmation\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						},
						"description": "Resets the user's password using a token"
					},
					"response": [
						{
							"name": "Password reset successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"<string>\",\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"password_confirmation\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Invalid token or request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"<string>\",\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"password_confirmation\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Validation error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"<string>\",\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"password_confirmation\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"errors\": {\n    \"token\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"email\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"password\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"password_confirmation\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "reconcile",
			"item": [
				{
					"name": "reconcile-embeddings",
					"item": [
						{
							"name": "Reconciliation - Embeddings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"// Get the response JSON",
											"let responseData = pm.response.json();",
											"",
											"// Save the full response",
											"pm.collectionVariables.set(\"reconciliation_status\", responseData.status);",
											"pm.collectionVariables.set(\"reconciliation_id\", responseData.data.reconciliation_id)",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bank_statements[]",
											"description": "(Required) Array of Bank Statement CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdec-729e-4510-a0a4-66a8a10e6e06"
										},
										{
											"key": "ledgers[]",
											"description": "(Required) Array of Ledger CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdec-951f-4530-a343-ee415550efc9"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								},
								"description": "Upload and compare two sets of files using various reconciliation methods"
							},
							"response": [
								{
									"name": "Reconciliation - Embeddings",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bank_statements[]",
													"description": "(Required) Array of Bank Statement CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/untitled folder/Bank Statement 30.csv"
												},
												{
													"key": "ledgers[]",
													"description": "(Required) Array of Ledger CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/untitled folder/company_ledger_30.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile-embeddings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 20:21:42 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Reconciliation initiated successfully\",\n    \"status\": \"success\",\n    \"status_code\": 200,\n    \"data\": {\n        \"reconciliation_id\": \"a484bd0c-7f57-41a5-8970-658d61f6740f\"\n    }\n}"
								}
							]
						},
						{
							"name": "Upload a valid Bank Statement and Company Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.status_code).to.exist;",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"});",
											"",
											"// Get the response JSON",
											"let responseData = pm.response.json();",
											"",
											"// Save the full response",
											"pm.collectionVariables.set(\"reconciliation_status\", responseData.status);",
											"",
											"// Save each match as an individual variable",
											"// responseData.data.matches.forEach((match, index) => {",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_date`, match.file1_transaction.Date);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_description`, match.file1_transaction.Description);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_amount`, match.file1_transaction.Amount);",
											"    ",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_date`, match.file2_transaction.Date);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_description`, match.file2_transaction.Description);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_amount`, match.file2_transaction.Amount);",
											"    ",
											"//     pm.collectionVariables.set(`match_${index + 1}_match_score`, match.match_score);",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bank_statements[]",
											"description": "(Required) Array of Bank Statement CSV files",
											"type": "file",
											"src": [
												"postman-cloud:///1f00cdeb-30e5-47a0-970f-b8d73315d681",
												"postman-cloud:///1f00cdeb-317f-4490-8cea-e240443b7bfa"
											]
										},
										{
											"key": "ledgers[]",
											"description": "(Required) Array of Ledger CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdeb-617a-4000-9f5c-0475bf342123"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								},
								"description": "Upload and compare two sets of files using various reconciliation methods"
							},
							"response": [
								{
									"name": "Reconciliation - Embeddings Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bank_statements[]",
													"description": "(Required) Array of Bank Statement CSV files",
													"type": "file",
													"src": [
														"/Users/mgbefa/Desktop/Bank Statement/sch_bank_statement1.csv",
														"/Users/mgbefa/Desktop/Bank Statement/sch_bank_statement2.csv"
													]
												},
												{
													"key": "ledgers[]",
													"description": "(Required) Array of Ledger CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/school_ledger.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile-embeddings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 08:51:13 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Reconciliation initiated successfully\",\n    \"status\": \"success\",\n    \"status_code\": 200,\n    \"data\": {\n        \"reconciliation_id\": \"ca004fbc-ccab-4055-8b2e-c4cdb7417d1c\"\n    }\n}"
								}
							]
						},
						{
							"name": "User does not upload any file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Message and errors fields are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"    pm.expect(responseData.errors).to.be.an('object');",
											"    Object.values(responseData.errors).forEach(errorArray => {",
											"        pm.expect(errorArray).to.be.an('array');",
											"        errorArray.forEach(error => {",
											"            pm.expect(error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
											"        });",
											"    });",
											"});",
											"",
											"",
											"// pm.test(\"Validate the format of file1 and file2 fields in errors object\", function () {",
											"//     const responseData = pm.response.json();",
											"    ",
											"//     pm.expect(responseData.errors).to.be.an('object');",
											"//     pm.expect(responseData.errors.file1).to.be.an('array');",
											"//     pm.expect(responseData.errors.file2).to.be.an('array');",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file1",
											"type": "file",
											"src": []
										},
										{
											"key": "file2",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								}
							},
							"response": [
								{
									"name": "User does not upload any file",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file1",
													"type": "file",
													"src": []
												},
												{
													"key": "file2",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile-embeddings"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 06:37:28 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The bank statements field is required. (and 1 more error)\",\n    \"errors\": {\n        \"bank_statements\": [\n            \"The bank statements field is required.\"\n        ],\n        \"ledgers\": [\n            \"The ledgers field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Upload a Bank Statement and Company Ledger in an unsupported format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file1[]",
											"type": "file",
											"src": "postman-cloud:///1f00cdf0-b2c7-4a70-9640-d658e8cb9b03"
										},
										{
											"key": "file2[]",
											"type": "file",
											"src": "postman-cloud:///1f00cdf0-b416-4200-9215-33fa04df20dd"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								}
							},
							"response": [
								{
									"name": "User cannot upload a Bank Statement in an unsupported format (e.g., PDF, XLS, DOC) Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file1",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Account Statement.pdf"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Company Ledger.pdf"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:02:21 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The file1 field is required. (and 1 more error)\",\n    \"errors\": {\n        \"file1\": [\n            \"The file1 field is required.\"\n        ],\n        \"file2\": [\n            \"The file2 field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "Upload a corrupted Bank Statement and Company Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - message and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file1",
											"type": "file",
											"src": "postman-cloud:///1f00ce05-4561-42a0-86f8-ec08643f865f"
										},
										{
											"key": "file2",
											"type": "file",
											"src": "postman-cloud:///1f00ce06-a5f3-4f40-85ee-ce828d5b033d"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								}
							},
							"response": [
								{
									"name": "Upload a corrupted Bank Statement and Company Ledger",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file1",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/corrupted file.pdf"
												},
												{
													"key": "file2",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/corrupted file.pdf"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile"
											]
										}
									},
									"status": "Unprocessable Content",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:03:16 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"The file1 field is required. (and 1 more error)\",\n    \"errors\": {\n        \"file1\": [\n            \"The file1 field is required.\"\n        ],\n        \"file2\": [\n            \"The file2 field is required.\"\n        ]\n    }\n}"
								}
							]
						},
						{
							"name": "You have reached your reconciliation limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.status_code).to.exist;",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"});",
											"",
											"// Get the response JSON",
											"let responseData = pm.response.json();",
											"",
											"// Save the full response",
											"pm.collectionVariables.set(\"reconciliation_status\", responseData.status);",
											"",
											"// Save each match as an individual variable",
											"// responseData.data.matches.forEach((match, index) => {",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_date`, match.file1_transaction.Date);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_description`, match.file1_transaction.Description);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_amount`, match.file1_transaction.Amount);",
											"    ",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_date`, match.file2_transaction.Date);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_description`, match.file2_transaction.Description);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_amount`, match.file2_transaction.Amount);",
											"    ",
											"//     pm.collectionVariables.set(`match_${index + 1}_match_score`, match.match_score);",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bank_statements[]",
											"description": "(Required) Array of Bank Statement CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdf6-345b-4b40-b514-933be8cbad7d"
										},
										{
											"key": "ledgers[]",
											"description": "(Required) Array of Ledger CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdf6-4725-4460-bc79-6d102bc446ec"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								},
								"description": "Upload and compare two sets of files using various reconciliation methods"
							},
							"response": [
								{
									"name": "New Reconciliation Approach - Embeddings",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bank_statements[]",
													"description": "(Required) Array of Bank Statement CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/sch_bank_statement1.csv"
												},
												{
													"key": "ledgers[]",
													"description": "(Required) Array of Ledger CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/school_ledger.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile-embeddings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 08:47:43 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Reconciliation initiated successfully\",\n    \"status\": \"success\",\n    \"status_code\": 200,\n    \"data\": {\n        \"reconciliation_id\": \"24f21304-0a52-4f19-8b67-161dd3e141e3\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get Reconciliations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// Parse the response body as JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the response contains reconciliation data",
											"pm.test(\"Response contains reconciliation data\", function () {",
											"    pm.expect(response.data).to.be.an(\"array\").that.is.not.empty;",
											"});",
											"",
											"// Select a random reconciliation entry",
											"if (response.data && response.data.length > 0) {",
											"    let randomIndex = Math.floor(Math.random() * response.data.length);",
											"    let randomReconciliation = response.data[randomIndex];",
											"",
											"    // Save variables in Postman Collection",
											"    pm.collectionVariables.set(\"reconciliation_id\", randomReconciliation.id);",
											"    pm.collectionVariables.set(\"reconciliation_title\", randomReconciliation.title);",
											"    pm.collectionVariables.set(\"reconciliation_status\", randomReconciliation.status);",
											"",
											"    console.log(\"Reconciliation Data Saved:\", randomReconciliation);",
											"} else {",
											"    console.log(\"No reconciliation data found in response.\");",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bank_statements[]",
											"description": "(Required) Array of Bank Statement CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdfb-005b-4610-8815-8543659f6e44"
										},
										{
											"key": "ledgers[]",
											"description": "(Required) Array of Ledger CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdfa-fa21-4240-b41c-2f707bb7b073"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconciliations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconciliations"
									]
								},
								"description": "Upload and compare two sets of files using various reconciliation methods"
							},
							"response": [
								{
									"name": "New Reconciliation Approach - Embeddings Copy",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bank_statements[]",
													"description": "(Required) Array of Bank Statement CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/sch_bank_statement2.csv"
												},
												{
													"key": "ledgers[]",
													"description": "(Required) Array of Ledger CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/school_ledger.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconciliations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconciliations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 06:54:15 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"status_code\": 200,\n    \"status\": \"success\",\n    \"message\": \"User's reconciliations fetched successfuly!\",\n    \"data\": [\n        {\n            \"id\": \"4fa7a8fc-1d72-4f2e-90d7-61af20ca304c\",\n            \"title\": \"RCL-20250329-001\",\n            \"status\": \"Pending\",\n            \"date\": \"2025-03-29\"\n        },\n        {\n            \"id\": \"10927f90-00c3-4a16-abe4-3d9740751f80\",\n            \"title\": \"RCL-20250329-002\",\n            \"status\": \"Pending\",\n            \"date\": \"2025-03-29\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get Reconciliations Pending state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"// pm.test(\"Response has the required fields\", function () {",
											"//     const responseData = pm.response.json();",
											"    ",
											"//     pm.expect(responseData).to.be.an('object');",
											"//     pm.expect(responseData.message).to.exist;",
											"//     pm.expect(responseData.status).to.exist;",
											"//     pm.expect(responseData.status_code).to.exist;",
											"//     pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"// });",
											"",
											"// Get the response JSON",
											"let responseData = pm.response.json();",
											"",
											"// Save the full response",
											"// pm.collectionVariables.set(\"reconciliation_status\", responseData.status);",
											"",
											"// // Save each match as an individual variable",
											"// responseData.data.matches.forEach((match, index) => {",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_date`, match.file1_transaction.Date);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_description`, match.file1_transaction.Description);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file1_amount`, match.file1_transaction.Amount);",
											"    ",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_date`, match.file2_transaction.Date);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_description`, match.file2_transaction.Description);",
											"//     pm.collectionVariables.set(`match_${index + 1}_file2_amount`, match.file2_transaction.Amount);",
											"    ",
											"//     pm.collectionVariables.set(`match_${index + 1}_match_score`, match.match_score);",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bank_statements[]",
											"description": "(Required) Array of Bank Statement CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdfe-15e2-4850-bff5-9217b9696aff"
										},
										{
											"key": "ledgers[]",
											"description": "(Required) Array of Ledger CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdfe-95ad-45d0-8bbf-be794c8440b5"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconciliations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconciliations"
									]
								},
								"description": "Upload and compare two sets of files using various reconciliation methods"
							},
							"response": [
								{
									"name": "Get Reconciliations Copy",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bank_statements[]",
													"description": "(Required) Array of Bank Statement CSV files",
													"type": "file",
													"src": [
														"/Users/mgbefa/Desktop/Bank Statement/sch_bank_statement2.csv",
														"/Users/mgbefa/Desktop/Bank Statement/sch_bank_statement1.csv"
													]
												},
												{
													"key": "ledgers[]",
													"description": "(Required) Array of Ledger CSV files",
													"type": "file",
													"src": "/Users/mgbefa/Desktop/Bank Statement/school_ledger.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconciliations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconciliations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 08:57:28 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"status_code\": 200,\n    \"status\": \"success\",\n    \"message\": \"User's reconciliations fetched successfuly!\",\n    \"data\": [\n        {\n            \"id\": \"44f5f21c-8a95-4d69-8692-73e82d30ae2b\",\n            \"title\": \"RCL-20250329-001\",\n            \"status\": \"Completed\",\n            \"date\": \"2025-03-29\"\n        },\n        {\n            \"id\": \"ca004fbc-ccab-4055-8b2e-c4cdb7417d1c\",\n            \"title\": \"RCL-20250329-002\",\n            \"status\": \"Completed\",\n            \"date\": \"2025-03-29\"\n        },\n        {\n            \"id\": \"fd6288cf-fd89-4697-89fb-81a509b220ab\",\n            \"title\": \"RCL-20250329-003\",\n            \"status\": \"Completed\",\n            \"date\": \"2025-03-29\"\n        },\n        {\n            \"id\": \"69aa9ece-1663-4054-a76a-caa2e233c451\",\n            \"title\": \"RCL-20250329-004\",\n            \"status\": \"Pending\",\n            \"date\": \"2025-03-29\"\n        }\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Limit reached after 5 reconciliation",
					"item": [
						{
							"name": "User login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - code, message, data\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('code');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('data');",
											"});",
											"",
											"",
											"pm.test(\"Validate the user object\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data.user).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"// pm.test(\"Email is in a valid format\", function () {",
											"//     const responseData = pm.response.json();",
											"    ",
											"//     pm.expect(responseData.data.user.email).to.be.a('string').and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"// });",
											"",
											"",
											"pm.test(\"Token is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
											"});",
											"",
											"// Parse the response body as JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the response contains a token",
											"pm.test(\"Response contains a token\", function () {",
											"    pm.expect(response.data).to.have.property(\"token\");",
											"});",
											"",
											"// Save the token in a collection variable",
											"if (response.data && response.data.token) {",
											"    pm.collectionVariables.set(\"bearerToken\", response.data.token);",
											"    console.log(\"Token saved successfully:\", response.data.token);",
											"} else {",
											"    console.log(\"Token not found in response\");",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"Michel76@gmail.com\",\n  \"password\": \"Welcome@22\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								},
								"description": "Authenticates a user and returns a JWT token"
							},
							"response": [
								{
									"name": "User login",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Welcome@22\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sat, 29 Mar 2025 20:21:28 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Login Success\",\n    \"data\": {\n        \"user\": {\n            \"id\": 160,\n            \"name\": \"Vickie Greenholt\",\n            \"email\": \"Daphne.Kunze@gmail.com\",\n            \"email_verified_at\": null,\n            \"created_at\": \"2025-03-29T20:13:28.000000Z\",\n            \"updated_at\": \"2025-03-29T20:13:28.000000Z\"\n        },\n        \"plan\": {\n            \"id\": 134,\n            \"user_id\": 160,\n            \"created_at\": \"2025-03-29T20:13:28.000000Z\",\n            \"updated_at\": \"2025-03-29T20:13:28.000000Z\",\n            \"plan_id\": \"8abfb0e1-cf2c-486a-8ee8-2fbd132bea32\",\n            \"stripe_reference\": null,\n            \"start_date\": \"2025-03-29T20:13:28.000000Z\",\n            \"expire_date\": \"2025-04-28T20:13:28.000000Z\",\n            \"is_active\": true,\n            \"reconciliations_used\": 0\n        },\n        \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2FwaS1kZXYucmVjb254aS5jb20vYXBpL3YxL2F1dGgvbG9naW4iLCJpYXQiOjE3NDMyNzk2ODgsImV4cCI6MTc0Mzg4NDQ4OCwibmJmIjoxNzQzMjc5Njg4LCJqdGkiOiJzRXg1QlJrMUFFbGhkZngxIiwic3ViIjoiMTYwIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.9KUuXTF3deDasF1h6DENROziyTU0Mj8jeZM0xH0FuEw\"\n    }\n}"
								}
							]
						},
						{
							"name": "Limit reached after 5 reconciliation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 429\", function () {",
											"    pm.response.to.have.status(429);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bank_statements[]",
											"description": "(Required) Array of Bank Statement CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdec-729e-4510-a0a4-66a8a10e6e06"
										},
										{
											"key": "ledgers[]",
											"description": "(Required) Array of Ledger CSV files",
											"type": "file",
											"src": "postman-cloud:///1f00cdec-951f-4530-a343-ee415550efc9"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"reconcile-embeddings"
									]
								},
								"description": "Upload and compare two sets of files using various reconciliation methods"
							},
							"response": [
								{
									"name": "Limit reached after 5 reconciliation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "bank_statements[]",
													"description": "(Required) Array of Bank Statement CSV files",
													"type": "file",
													"src": "postman-cloud:///1f00cdec-729e-4510-a0a4-66a8a10e6e06"
												},
												{
													"key": "ledgers[]",
													"description": "(Required) Array of Ledger CSV files",
													"type": "file",
													"src": "postman-cloud:///1f00cdec-951f-4530-a343-ee415550efc9"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/reconcile-embeddings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"reconcile-embeddings"
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "nginx/1.24.0 (Ubuntu)"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, private"
										},
										{
											"key": "Date",
											"value": "Sun, 30 Mar 2025 01:05:18 GMT"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"You have reached your reconciliation limit. Please upgrade your plan or wait until the next period.\"\n}"
								}
							]
						}
					],
					"description": "User's limit is restricted after 5 reconciliations."
				}
			],
			"description": "Users upload a bank statement and company ledger file in CSV format for reconciliation.\n\nAI automatically matches transactions from the bank statement to the company ledger after the user clicks on the reconcile button."
		},
		{
			"name": "subscribe",
			"item": [
				{
					"name": "Subscribe to the newsletter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 422\", function () {",
									"    pm.expect(pm.response.code).to.equal(422);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"perez3@yopmail.com\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/newsletter/subscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"newsletter",
								"subscribe"
							]
						},
						"description": "Allows a user to subscribe to the newsletter."
					},
					"response": [
						{
							"name": "Subscribe to the newsletter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"maumau@yopmail.com\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/newsletter/subscribe",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"newsletter",
										"subscribe"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.24.0 (Ubuntu)"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 25 Mar 2025 21:39:15 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"message\": \"Subscription Successful\",\n    \"data\": {\n        \"email\": \"maumau@yopmail.com\"\n    }\n}"
						}
					]
				},
				{
					"name": "Unsubscribe from the newsletter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<email>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/newsletter/unsubscribe",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"newsletter",
								"unsubscribe"
							]
						},
						"description": "Allows a user to unsubscribe from the newsletter."
					},
					"response": [
						{
							"name": "Unsubscription successful",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/newsletter/unsubscribe",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"newsletter",
										"unsubscribe"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"email\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Unsubscription failed (email not found)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/newsletter/unsubscribe",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"newsletter",
										"unsubscribe"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "One-click resubscribe to the newsletter",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/newsletter/resubscribe/:email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"newsletter",
								"resubscribe",
								":email"
							],
							"variable": [
								{
									"key": "email",
									"value": "<email>",
									"description": "(Required) The email address to resubscribe"
								}
							]
						},
						"description": "Allows a user to resubscribe to the newsletter by clicking a link in their email."
					},
					"response": [
						{
							"name": "Resubscription successful",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/newsletter/resubscribe/:email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"newsletter",
										"resubscribe",
										":email"
									],
									"variable": [
										{
											"key": "email"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"email\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Invalid email format",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/newsletter/resubscribe/:email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"newsletter",
										"resubscribe",
										":email"
									],
									"variable": [
										{
											"key": "email"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Email not found in subscription list",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/newsletter/resubscribe/:email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"newsletter",
										"resubscribe",
										":email"
									],
									"variable": [
										{
											"key": "email"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			],
			"description": "User can subscribe to treconxi's newsletter"
		},
		{
			"name": "payment-plan",
			"item": [
				{
					"name": "history",
					"item": [
						{
							"name": "Get user's payment plan history",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan/history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan",
										"history"
									]
								},
								"description": "Retrieves the authenticated user's payment plan transaction history"
							},
							"response": [
								{
									"name": "Payment plan history retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/payment-plan/history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"payment-plan",
												"history"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"user_id\": \"<integer>\",\n      \"amount\": \"<float>\",\n      \"plan\": \"<string>\",\n      \"transaction_date\": \"<dateTime>\",\n      \"status\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"user_id\": \"<integer>\",\n      \"amount\": \"<float>\",\n      \"plan\": \"<string>\",\n      \"transaction_date\": \"<dateTime>\",\n      \"status\": \"<string>\"\n    }\n  ],\n  \"links\": {\n    \"first\": \"<string>\",\n    \"last\": \"<string>\",\n    \"prev\": \"<string>\",\n    \"next\": \"<string>\"\n  },\n  \"meta\": {\n    \"current_page\": \"<integer>\",\n    \"from\": \"<integer>\",\n    \"last_page\": \"<integer>\",\n    \"path\": \"<string>\",\n    \"per_page\": \"<integer>\",\n    \"to\": \"<integer>\",\n    \"total\": \"<integer>\"\n  }\n}"
								},
								{
									"name": "Unauthenticated",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/payment-plan/history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"payment-plan",
												"history"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get user's current payment plan",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/payment-plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"payment-plan"
							]
						},
						"description": "Retrieves the authenticated user's current payment plan details"
					},
					"response": [
						{
							"name": "Payment plan retrieved successfully",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"plan\": \"<string>\",\n    \"days_remaining\": \"<integer>\",\n    \"is_expired\": \"<boolean>\"\n  }\n}"
						},
						{
							"name": "No active payment plan found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update user's payment plan",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": \"<float>\",\n  \"plan\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/payment-plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"payment-plan"
							]
						},
						"description": "Updates the authenticated user's payment plan"
					},
					"response": [
						{
							"name": "Payment plan updated successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"price\": \"<float>\",\n  \"plan\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"plan\": \"<string>\",\n    \"start_date\": \"<dateTime>\",\n    \"expire_date\": \"<dateTime>\"\n  }\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"price\": \"<float>\",\n  \"plan\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
						}
					]
				},
				{
					"name": "Create a new payment plan",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": \"<float>\",\n  \"plan\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/payment-plan",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"payment-plan"
							]
						},
						"description": "Creates a new payment plan for the authenticated user"
					},
					"response": [
						{
							"name": "Payment plan created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"price\": \"<float>\",\n  \"plan\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"plan\": \"<string>\",\n    \"start_date\": \"<dateTime>\",\n    \"expire_date\": \"<dateTime>\"\n  }\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"price\": \"<float>\",\n  \"plan\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/payment-plan",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"payment-plan"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "Submit a contact form",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<email>\",\n  \"message\": \"<string>\",\n  \"phone_number\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/contact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"contact"
							]
						},
						"description": "Handles the submission of a contact form. Validates the input and saves the message to the database."
					},
					"response": [
						{
							"name": "Message saved successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<email>\",\n  \"message\": \"<string>\",\n  \"phone_number\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/contact",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"contact"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"message\": \"<string>\",\n    \"phone_number\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Validation failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<email>\",\n  \"message\": \"<string>\",\n  \"phone_number\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/contact",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"contact"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"errors\": {\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"message\": \"<string>\",\n    \"phone_number\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<email>\",\n  \"message\": \"<string>\",\n  \"phone_number\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/contact",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"contact"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Retrieve authenticated user details",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user"
							]
						},
						"description": "Fetches the details of the authenticated user using a valid JWT token."
					},
					"response": [
						{
							"name": "User successfully fetched",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"user\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"email\": \"<string>\",\n      \"avatar\": \"<string>\",\n      \"created_at\": \"<dateTime>\",\n      \"updated_at\": \"<dateTime>\",\n      \"email_verified\": \"<boolean>\"\n    }\n  }\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Delete user account",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user"
							]
						},
						"description": "Deletes the authenticated user's account permanently with all associated data"
					},
					"response": [
						{
							"name": "Account deleted successfully",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "customer-feedback",
			"item": [
				{
					"name": "Submit customer feedback",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "<string>",
									"description": "(Required) Customer name",
									"type": "text"
								},
								{
									"key": "email",
									"value": "<email>",
									"description": "(Required) Customer email address",
									"type": "text"
								},
								{
									"key": "message",
									"value": "<string>",
									"description": "(Required) Feedback message",
									"type": "text"
								},
								{
									"key": "request_type",
									"value": "<string>",
									"description": "(Required) Type of request",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "<string>",
									"description": "Subject of the feedback",
									"type": "text"
								},
								{
									"key": "file",
									"description": "Optional file attachment",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/customer-feedback",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"customer-feedback"
							]
						},
						"description": "Submits customer feedback with an optional file attachment"
					},
					"response": [
						{
							"name": "Feedback submitted successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "<string>",
											"description": "(Required) Customer name",
											"type": "text"
										},
										{
											"key": "email",
											"value": "<email>",
											"description": "(Required) Customer email address",
											"type": "text"
										},
										{
											"key": "message",
											"value": "<string>",
											"description": "(Required) Feedback message",
											"type": "text"
										},
										{
											"key": "request_type",
											"value": "<string>",
											"description": "(Required) Type of request",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "<string>",
											"description": "Subject of the feedback",
											"type": "text"
										},
										{
											"key": "file",
											"description": "Optional file attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer-feedback",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer-feedback"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"subject\": \"<string>\",\n    \"file_path\": \"<string>\",\n    \"created_at\": \"<dateTime>\"\n  }\n}"
						},
						{
							"name": "Validation error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "<string>",
											"description": "(Required) Customer name",
											"type": "text"
										},
										{
											"key": "email",
											"value": "<email>",
											"description": "(Required) Customer email address",
											"type": "text"
										},
										{
											"key": "message",
											"value": "<string>",
											"description": "(Required) Feedback message",
											"type": "text"
										},
										{
											"key": "request_type",
											"value": "<string>",
											"description": "(Required) Type of request",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "<string>",
											"description": "Subject of the feedback",
											"type": "text"
										},
										{
											"key": "file",
											"description": "Optional file attachment",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer-feedback",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer-feedback"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "job-application",
			"item": [
				{
					"name": "Submit a job application",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "<string>",
									"description": "(Required) Full name of the applicant",
									"type": "text"
								},
								{
									"key": "email",
									"value": "<email>",
									"description": "(Required) Email address of the applicant",
									"type": "text"
								},
								{
									"key": "resume",
									"description": "(Required) Resume file (PDF, DOC, DOCX, max 2MB)",
									"type": "file",
									"src": []
								},
								{
									"key": "linkedin",
									"value": "<string>",
									"description": "LinkedIn profile URL",
									"type": "text"
								},
								{
									"key": "compensation",
									"value": "<float>",
									"description": "Expected compensation",
									"type": "text"
								},
								{
									"key": "experience",
									"value": "<integer>",
									"description": "Years of experience",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/job-application",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"job-application"
							]
						},
						"description": "Handles the submission of a job application. Validates the input, stores the resume file, and saves the application to the database."
					},
					"response": [
						{
							"name": "Application submitted successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "<string>",
											"description": "(Required) Full name of the applicant",
											"type": "text"
										},
										{
											"key": "email",
											"value": "<email>",
											"description": "(Required) Email address of the applicant",
											"type": "text"
										},
										{
											"key": "resume",
											"description": "(Required) Resume file (PDF, DOC, DOCX, max 2MB)",
											"type": "file",
											"src": []
										},
										{
											"key": "linkedin",
											"value": "<string>",
											"description": "LinkedIn profile URL",
											"type": "text"
										},
										{
											"key": "compensation",
											"value": "<float>",
											"description": "Expected compensation",
											"type": "text"
										},
										{
											"key": "experience",
											"value": "<integer>",
											"description": "Years of experience",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/job-application",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"job-application"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"resume\": \"<string>\",\n    \"linkedin\": \"<string>\",\n    \"compensation\": \"<number>\",\n    \"experience\": \"<integer>\",\n    \"created_at\": \"<dateTime>\",\n    \"updated_at\": \"<dateTime>\",\n    \"id\": \"<integer>\"\n  }\n}"
						},
						{
							"name": "Validation failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "<string>",
											"description": "(Required) Full name of the applicant",
											"type": "text"
										},
										{
											"key": "email",
											"value": "<email>",
											"description": "(Required) Email address of the applicant",
											"type": "text"
										},
										{
											"key": "resume",
											"description": "(Required) Resume file (PDF, DOC, DOCX, max 2MB)",
											"type": "file",
											"src": []
										},
										{
											"key": "linkedin",
											"value": "<string>",
											"description": "LinkedIn profile URL",
											"type": "text"
										},
										{
											"key": "compensation",
											"value": "<float>",
											"description": "Expected compensation",
											"type": "text"
										},
										{
											"key": "experience",
											"value": "<integer>",
											"description": "Years of experience",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/job-application",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"job-application"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"errors\": {\n    \"name\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"email\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"resume\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "<string>",
											"description": "(Required) Full name of the applicant",
											"type": "text"
										},
										{
											"key": "email",
											"value": "<email>",
											"description": "(Required) Email address of the applicant",
											"type": "text"
										},
										{
											"key": "resume",
											"description": "(Required) Resume file (PDF, DOC, DOCX, max 2MB)",
											"type": "file",
											"src": []
										},
										{
											"key": "linkedin",
											"value": "<string>",
											"description": "LinkedIn profile URL",
											"type": "text"
										},
										{
											"key": "compensation",
											"value": "<float>",
											"description": "Expected compensation",
											"type": "text"
										},
										{
											"key": "experience",
											"value": "<integer>",
											"description": "Years of experience",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/job-application",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"job-application"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "partners",
			"item": [
				{
					"name": "Submit a partnership request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"<string>\",\n  \"service_interested\": \"<string>\",\n  \"email\": \"<email>\",\n  \"phone_number\": \"<string>\",\n  \"business_name\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"partners"
							]
						},
						"description": "Submits a partnership request form with contact and business details"
					},
					"response": [
						{
							"name": "Partnership request submitted successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"full_name\": \"<string>\",\n  \"service_interested\": \"<string>\",\n  \"email\": \"<email>\",\n  \"phone_number\": \"<string>\",\n  \"business_name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/partners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"partners"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Validation error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"full_name\": \"<string>\",\n  \"service_interested\": \"<string>\",\n  \"email\": \"<email>\",\n  \"phone_number\": \"<string>\",\n  \"business_name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/partners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"partners"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"errors\": {\n    \"full_name\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"service_interested\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"email\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"phone_number\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
						},
						{
							"name": "Server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"full_name\": \"<string>\",\n  \"service_interested\": \"<string>\",\n  \"email\": \"<email>\",\n  \"phone_number\": \"<string>\",\n  \"business_name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/partners",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"partners"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "plans",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get plan by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/plans/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"plans",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) Plan ID"
										}
									]
								}
							},
							"response": [
								{
									"name": "Plan retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Plan not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a plan",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/plans/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"plans",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "(Required) The ID of the plan to delete"
										}
									]
								},
								"description": "Deletes an existing plan"
							},
							"response": [
								{
									"name": "Plan deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Plan not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Partially update a plan",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<float>\",\n  \"reconciliations_per_month\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/plans/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"plans",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "(Required) The ID of the plan to update"
										}
									]
								},
								"description": "Updates an existing plan's details. Only the provided fields will be updated."
							},
							"response": [
								{
									"name": "Plan updated successfully",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<float>\",\n  \"reconciliations_per_month\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Plan not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<float>\",\n  \"reconciliations_per_month\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation error",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<float>\",\n  \"reconciliations_per_month\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/plans/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"plans",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new plan",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<number>\",\n  \"reconciliations_per_month\": \"<integer>\",\n  \"description\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/plans",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"plans"
							]
						}
					},
					"response": [
						{
							"name": "Plan created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<number>\",\n  \"reconciliations_per_month\": \"<integer>\",\n  \"description\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/plans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"plans"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"plan_length\": \"<integer>\",\n  \"plan\": \"<string>\",\n  \"amount\": \"<number>\",\n  \"reconciliations_per_month\": \"<integer>\",\n  \"description\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/plans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"plans"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "profile",
			"item": [
				{
					"name": "update",
					"item": [
						{
							"name": "Update user profile",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "country",
											"value": "<string>",
											"description": "User's country",
											"type": "text"
										},
										{
											"key": "city",
											"value": "<string>",
											"description": "User's city",
											"type": "text"
										},
										{
											"key": "avatar",
											"description": "User's profile picture (JPEG, PNG, JPG, GIF up to 2MB)",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/profile/update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"profile",
										"update"
									]
								},
								"description": "Updates the authenticated user's profile information including country, city, and avatar"
							},
							"response": [
								{
									"name": "Profile updated successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "country",
													"value": "<string>",
													"description": "User's country",
													"type": "text"
												},
												{
													"key": "city",
													"value": "<string>",
													"description": "User's city",
													"type": "text"
												},
												{
													"key": "avatar",
													"description": "User's profile picture (JPEG, PNG, JPG, GIF up to 2MB)",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/profile/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"profile",
												"update"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"country\": \"<string>\",\n    \"city\": \"<string>\",\n    \"avatar\": \"<string>\",\n    \"created_at\": \"<dateTime>\",\n    \"updated_at\": \"<dateTime>\"\n  }\n}"
								},
								{
									"name": "Validation error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "country",
													"value": "<string>",
													"description": "User's country",
													"type": "text"
												},
												{
													"key": "city",
													"value": "<string>",
													"description": "User's city",
													"type": "text"
												},
												{
													"key": "avatar",
													"description": "User's profile picture (JPEG, PNG, JPG, GIF up to 2MB)",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/profile/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"profile",
												"update"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"avatar\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "country",
													"value": "<string>",
													"description": "User's country",
													"type": "text"
												},
												{
													"key": "city",
													"value": "<string>",
													"description": "User's city",
													"type": "text"
												},
												{
													"key": "avatar",
													"description": "User's profile picture (JPEG, PNG, JPG, GIF up to 2MB)",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/profile/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"profile",
												"update"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "country",
													"value": "<string>",
													"description": "User's country",
													"type": "text"
												},
												{
													"key": "city",
													"value": "<string>",
													"description": "User's city",
													"type": "text"
												},
												{
													"key": "avatar",
													"description": "User's profile picture (JPEG, PNG, JPG, GIF up to 2MB)",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/profile/update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"profile",
												"update"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"<string>\",\n  \"status_code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": \"<null>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "wait-list",
			"item": [
				{
					"name": "Add email to waitlist",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<email>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/wait-list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"wait-list"
							]
						},
						"description": "Adds a new email address to the wait list"
					},
					"response": [
						{
							"name": "Successfully joined wait list",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/wait-list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"wait-list"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/wait-list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"wait-list"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<boolean>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "logout",
			"item": [
				{
					"name": "User logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "Logs out the authenticated user and invalidates the token"
					},
					"response": [
						{
							"name": "User logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.24.0 (Ubuntu)"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Sat, 29 Mar 2025 08:23:54 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"message\": \"Logout Success\"\n}"
						}
					]
				},
				{
					"name": "The token has been blacklisted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "Logs out the authenticated user and invalidates the token"
					},
					"response": [
						{
							"name": "User logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.24.0 (Ubuntu)"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Sat, 15 Mar 2025 11:34:09 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\n    \"code\": 200,\n    \"message\": \"Logout Success\"\n}"
						}
					]
				}
			],
			"description": "User logs out of the system"
		},
		{
			"name": "Home Endpoint",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/v1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1"
					]
				},
				"description": "Welcome message or API overview"
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"<string>\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api-dev.reconxi.com",
			"type": "default"
		},
		{
			"key": "bearerToken",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "reconciliation_status",
			"value": ""
		},
		{
			"key": "reconciliation_id",
			"value": ""
		},
		{
			"key": "reconciliation_title",
			"value": ""
		}
	]
}